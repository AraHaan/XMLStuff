trigger:
- master

jobs:
- job: vs2019_build
  displayName: VS2019 Build
  condition: succeeded()
  pool: Hosted
  timeoutInMinutes: 240
  steps:
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '4.9.4'
      checkLatest: true
  - powershell: |
      Write-Host "Installing .NET Core 3.0.100-preview-010431 SDK..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $exePath = "$env:TEMP\dotnet-sdk-3.0.100-preview3-010431-win-x64.exe"
      (New-Object Net.WebClient).DownloadFile('https://download.visualstudio.microsoft.com/download/pr/31b5b67f-b787-4f73-a728-5ec61f10a4de/be6430bcd9a62f610cd9f12f8cc2c736/dotnet-sdk-3.0.100-preview3-010431-win-x64.exe', $exePath)
      Write-Host "Installing..."
      cmd /c start /wait "$exePath" /quiet /norestart
      del $exePath
      Write-Host "Installed" -ForegroundColor Green
      Write-Host "Installing .NET Core 3.0.0-preview3-27503-5 runtime..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $exePath = "$env:TEMP\dotnet-runtime-3.0.0-preview3-27503-5-win-x64.exe"
      (New-Object Net.WebClient).DownloadFile('https://download.visualstudio.microsoft.com/download/pr/3f05ee2d-5372-43d6-9562-be86632a53d4/1361281426efa7ff206289adb0411f55/dotnet-runtime-3.0.0-preview3-27503-5-win-x64.exe', $exePath)
      Write-Host "Installing..."
      cmd /c start /wait "$exePath" /quiet /norestart
      del $exePath
      Write-Host "Installed" -ForegroundColor Green
    displayName: 'Download and install .NET Core 3 Preview 3.'
  - powershell: |
      Write-Host "Installing .NET Framework 4.7 Targeting Pack..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $exePath = "$env:TEMP\ndp47-devpack-enu.exe"
      (New-Object Net.WebClient).DownloadFile('https://go.microsoft.com/fwlink/?linkid=825318', $exePath)
      Write-Host "Installing..."
      cmd /c start /wait "$exePath" /quiet /norestart
      del $exePath
      Write-Host "Installed" -ForegroundColor Green
    displayName: 'Download and install .NET Framework 4.7.'
  - powershell: |
      Write-Host "Installing .NET Framework 4.7.1 Targeting Pack..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $exePath = "$env:TEMP\ndp471-devpack-enu.exe"
      (New-Object Net.WebClient).DownloadFile('https://go.microsoft.com/fwlink/?linkid=852102', $exePath)
      Write-Host "Installing..."
      cmd /c start /wait "$exePath" /quiet /norestart
      del $exePath
      Write-Host "Installed" -ForegroundColor Green
    displayName: 'Download and install .NET Framework 4.7.1.'
  - powershell: |
      Write-Host "Installing .NET Framework 4.7.2 Targeting Pack..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $exePath = "$env:TEMP\ndp472-devpack-enu.exe"
      (New-Object Net.WebClient).DownloadFile('https://go.microsoft.com/fwlink/?linkid=874338', $exePath)
      Write-Host "Installing..."
      cmd /c start /wait "$exePath" /quiet /norestart
      del $exePath
      Write-Host "Installed" -ForegroundColor Green
    displayName: 'Download and install .NET Framework 4.7.2.'
  - powershell: |
      Write-Host "Installing .NET Framework 4.8 Targeting Pack..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $exePath = "$env:TEMP\ndp48-devpack-enu.exe"
      (New-Object Net.WebClient).DownloadFile('https://download.visualstudio.microsoft.com/download/pr/9854b5f2-2341-4136-ad7d-1d881ab8d603/e3a011f2a41a59b086f78d64e1c7a3fc/ndp48-devpack-enu.exe', $exePath)
      Write-Host "Installing..."
      cmd /c start /wait "$exePath" /quiet /norestart
      del $exePath
      Write-Host "Installed" -ForegroundColor Green
    displayName: 'Download and install .NET Framework 4.8.'
  - powershell: |
      nuget sources Add -Name "Generic Roslyn Analyzers" -Source https://dotnet.myget.org/F/roslyn-analyzers/api/v3/index.json
      nuget install OpenCover -Version 4.6.519 -OutputDirectory packages
      nuget install Codecov -Version 1.1.0 -OutputDirectory packages
    displayName: 'Before Build'
  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      solution: 'src/XmlAbstraction/XmlAbstraction.sln'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: 'src/XmlAbstraction/XmlAbstraction.sln'
      arguments: '--configuration Release'
    displayName: 'build'
  - powershell: |
      cd src/XmlAbstraction/
      dotnet test test\ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      cd ../../
      packages\Codecov.1.1.0\tools\codecov.exe -f "src/XmlAbstraction/test/coverage.opencover.xml"
    displayName: Test
# TODO: deploy to nuget when there is a tag build? Or have AppVeyor do the packaging to nuget? MyGet support too???
#  - task: PublishPipelineArtifact@0
#    displayName: 'Publish Pipeline Artifact: test artifacts'
#    inputs:
#      artifactName: 'windows-artifacts'
#      targetPath: '$(Build.SourcesDirectory)\artifacts'
#  - task: PublishPipelineArtifact@0
#    displayName: 'Publish Pipeline Artifact: git-sdk-64-minimal'
#    inputs:
#      artifactName: 'git-sdk-64-minimal'
#      targetPath: '$(Build.SourcesDirectory)\git-sdk-64-minimal'
#  - powershell: |
#      if ("$GITFILESHAREPWD" -ne "" -and "$GITFILESHAREPWD" -ne "`$`(gitfileshare.pwd)") {
#        cmd /c rmdir "$(Build.SourcesDirectory)\test-cache"
#      }
#    displayName: 'Unmount test-cache'
#    condition: true
